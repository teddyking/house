// Code generated by counterfeiter. DO NOT EDIT.
package controllersfakes

import (
	"sync"

	"github.com/teddyking/house/controllers"
)

type FakeSearcher struct {
	NumResultsStub        func(string) (int, error)
	numResultsMutex       sync.RWMutex
	numResultsArgsForCall []struct {
		arg1 string
	}
	numResultsReturns struct {
		result1 int
		result2 error
	}
	numResultsReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSearcher) NumResults(arg1 string) (int, error) {
	fake.numResultsMutex.Lock()
	ret, specificReturn := fake.numResultsReturnsOnCall[len(fake.numResultsArgsForCall)]
	fake.numResultsArgsForCall = append(fake.numResultsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("NumResults", []interface{}{arg1})
	fake.numResultsMutex.Unlock()
	if fake.NumResultsStub != nil {
		return fake.NumResultsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.numResultsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSearcher) NumResultsCallCount() int {
	fake.numResultsMutex.RLock()
	defer fake.numResultsMutex.RUnlock()
	return len(fake.numResultsArgsForCall)
}

func (fake *FakeSearcher) NumResultsCalls(stub func(string) (int, error)) {
	fake.numResultsMutex.Lock()
	defer fake.numResultsMutex.Unlock()
	fake.NumResultsStub = stub
}

func (fake *FakeSearcher) NumResultsArgsForCall(i int) string {
	fake.numResultsMutex.RLock()
	defer fake.numResultsMutex.RUnlock()
	argsForCall := fake.numResultsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSearcher) NumResultsReturns(result1 int, result2 error) {
	fake.numResultsMutex.Lock()
	defer fake.numResultsMutex.Unlock()
	fake.NumResultsStub = nil
	fake.numResultsReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeSearcher) NumResultsReturnsOnCall(i int, result1 int, result2 error) {
	fake.numResultsMutex.Lock()
	defer fake.numResultsMutex.Unlock()
	fake.NumResultsStub = nil
	if fake.numResultsReturnsOnCall == nil {
		fake.numResultsReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.numResultsReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeSearcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.numResultsMutex.RLock()
	defer fake.numResultsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSearcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ controllers.Searcher = new(FakeSearcher)
